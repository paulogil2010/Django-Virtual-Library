# Generated by Django 4.2.6 on 2023-10-31 12:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Author Name', max_length=255, verbose_name='Author Name')),
                ('birthday', models.DateField(help_text='Author Birthday', verbose_name='Author birthday')),
                ('country', models.CharField(help_text='Author Country', max_length=255, verbose_name='Author Country')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'db_table': 'library_author',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Book Title', max_length=255, verbose_name='Title')),
                ('publish_date', models.DateField(blank=True, default=None, help_text='Book Publish Date', null=True, verbose_name='Publish Date')),
                ('isbn', models.CharField(blank=True, default='', help_text='Book ISBN', max_length=255, verbose_name='ISBN')),
                ('pages', models.IntegerField(blank=True, default=0, help_text='Book Pages', null=True, verbose_name='Pages')),
                ('cover_url', models.CharField(blank=True, default='', help_text='Book Cover URL', max_length=255, verbose_name='Cover URL')),
                ('description', models.TextField(blank=True, help_text='Book Description', verbose_name='Description')),
                ('author', models.ManyToManyField(blank=True, db_column='author_uid', help_text='Book Author', related_name='books', to='app_library.author', verbose_name='Author')),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'db_table': 'library_book',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Category Name', max_length=255, verbose_name='Category Name')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'library_category',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Publisher Name', max_length=255, verbose_name='Publisher Name')),
            ],
            options={
                'verbose_name': 'Publisher',
                'verbose_name_plural': 'Publishers',
                'db_table': 'library_publisher',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BookReview',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review', models.TextField(help_text='Content of the review', verbose_name='Review')),
                ('rating', models.PositiveSmallIntegerField(help_text='Numerical rating of the book', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
                ('book', models.ForeignKey(db_column='book_uid', help_text='Book being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='app_library.book', verbose_name='Book')),
                ('user', models.ForeignKey(db_column='user_uid', help_text='User who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='book_reviews', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Book Review',
                'verbose_name_plural': 'Book Reviews',
                'db_table': 'library_book_review',
                'ordering': ['-rating', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='category',
            field=models.ManyToManyField(blank=True, db_column='category_uid', help_text='Book Category', related_name='books', to='app_library.category', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(db_column='publisher_uid', help_text='Book Publisher', on_delete=django.db.models.deletion.CASCADE, related_name='books', to='app_library.publisher', verbose_name='Publisher'),
        ),
    ]
