# Generated by Django 4.2.6 on 2023-10-31 12:51

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(help_text='User First Name', max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(help_text='User Last Name', max_length=250, verbose_name='Last Name')),
                ('full_name', models.CharField(help_text='User Full Name', max_length=301, verbose_name='Full Name')),
                ('email', models.EmailField(help_text='User Email', max_length=100, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=True, help_text='User Active Status', verbose_name='Is Active')),
                ('is_staff', models.BooleanField(default=False, help_text='User Staff Status', verbose_name='Is Staff')),
                ('inactivation_date', models.DateTimeField(help_text='User Inactivation Date', null=True, verbose_name='Inactivation Date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'account_user',
            },
        ),
    ]
